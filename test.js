// Generated by CoffeeScript 1.6.2
(function() {
  var $container, ASPECT, FAR, HEIGHT, NEAR, VIEW_ANGLE, WIDTH, camera, p, pMaterial, pX, pY, pZ, particle, particleCount, particleSystem, particles, renderer, scene, update, _i, _ref;

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  WIDTH = 400;

  HEIGHT = 300;

  VIEW_ANGLE = 45;

  ASPECT = WIDTH / HEIGHT;

  NEAR = 200;

  FAR = 50000;

  $container = $('#container');

  renderer = new THREE.WebGLRenderer();

  camera = new THREE.Camera(VIEW_ANGLE, ASPECT, NEAR, FAR);

  scene = new THREE.Scene();

  camera.position.z = 1000;

  renderer.setClearColor(new THREE.Color(0, 1));

  renderer.setSize(WIDTH, HEIGHT);

  $container.append(renderer.domElement);

  particleCount = 1800;

  particles = new THREE.Geometry();

  pMaterial = new THREE.ParticleBasicMaterial({
    color: 0xFFFFFF,
    size: 20,
    map: THREE.ImageUtils.loadTexture('images/particle.png'),
    blending: THREE.AdditiveBlending,
    transparent: true
  });

  for (p = _i = 0, _ref = particleCount - 1; _i <= _ref; p = _i += 1) {
    pX = Math.random() * 500 - 250;
    pY = Math.random() * 500 - 250;
    pZ = Math.random() * 500 - 250;
    particle = new THREE.Vertex(new THREE.Vector3(pX, pY, pZ));
    particle.velocity = new THREE.Vector3(0, -Math.random(), 0);
    particles.vertices.push(particle);
  }

  particleSystem = new THREE.ParticleSystem(particles, pMaterial);

  particleSystem.sortParticles = true;

  scene.addChild(particleSystem);

  update = function() {
    var pCount;

    particleSystem.rotation.y += 0.01;
    pCount = particleCount;
    while (pCount--) {
      particle = particles.vertices[pCount];
      if (particle.position.y < -200) {
        particle.position.y = 200;
        particle.velocity.y = 0;
      }
      particle.velocity.y -= Math.random() * .1;
      particle.position.addSelf(particle.velocity);
    }
    particleSystem.geometry.__dirtyVertices = true;
    renderer.render(scene, camera);
    return requestAnimFrame(update);
  };

  requestAnimFrame(update);

}).call(this);
